<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">
	
	
	<!-- 引入config配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:app-config.properties</value>
			</list>
		</property>
	</bean>
	
	
	
	<!-- 数据源的配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">
  		<property name="driverClass">
  			<value>${jdbc.driverClassName}</value>
  		</property>
  		<property name="jdbcUrl">
  			<value>${jdbc.url}</value>
  		</property>
  		<property name="user">
  			<value>${jdbc.username}</value>
  		</property>
  		<property name="password">
  			<value>${jdbc.password}</value>
  		</property>
  		
  		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
  		<property name="initialPoolSize">
  			<value>${c3p0.initialPoolSize}</value>
  		</property>
  		<!--连接池中保留的最小连接数。-->
  		<property name="minPoolSize">
  			<value>${c3p0.minPoolSize}</value>
  		</property>
  		<!--连接池中保留的最大连接数。Default: 15 -->
  		<property name="maxPoolSize">
  			<value>${c3p0.maxPoolSize}</value>
  		</property>
  		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
  		<property name="maxIdleTime">   
            <value>${c3p0.maxIdleTime}</value>   
        </property>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
        <property name="acquireIncrement">   
            <value>${c3p0.acquireIncrement}</value>   
        </property>
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   
  		属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
  		如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->   
        <property name="maxStatements">   
            <value>${c3p0.maxStatements}</value>   
        </property>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->   
        <property name="idleConnectionTestPeriod">   
            <value>${c3p0.idleConnectionTestPeriod}</value>
        </property>
        <!--两次连接中间隔时间，单位毫秒，默认为1000 -->
        <property name="acquireRetryDelay">
        	<value>${c3p0.acquireRetryDelay}</value>
        </property>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->   
        <property name="acquireRetryAttempts">
            <value>${c3p0.acquireRetryAttempts}</value>
        </property>
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效   
  		保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试   
  		获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->   
        <property name="breakAfterAcquireFailure">
            <value>${c3p0.breakAfterAcquireFailure}</value>
        </property>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的   
  		时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable   
  		等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout">
            <value>${c3p0.testConnectionOnCheckout}</value>
        </property>
        <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 
                      通过多线程实现多个操作同时被执行。Default: 3--> 
        <property name="numHelperThreads">
        	<value>${c3p0.numHelperThreads}</value>
        </property>
        <property name="automaticTestTable">
        	<value>${c3p0.autoTestTable}</value>
        </property>
 	</bean>
 	
 	
 	<bean id = "jdbcTemplate"    
         class = "org.springframework.jdbc.core.JdbcTemplate">    
         <property name = "dataSource" ref="dataSource"/>    
    </bean>   
 	
 	
	  <bean id="sessionFactory"   class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"> 
        <property name="dataSource" ref="dataSource"/>
     	 <!--  
     	 	<property name="annotatedClasses">
        		<list>
        			<value>com.xcj.admin.entity.*</value>
        		</list>
             </property>
		 -->  
        <property name="packagesToScan" value="com.**.entity" ></property>
        <property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.autoReconnect">true</prop>
				<prop key="hibernate.connection.release_mode">${hibernate.after_statement}</prop>
            </props>
        </property>
    </bean>
    

    <!-- 不破坏数据库,注册SessionFactory -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="edit*">PROPAGATION_REQUIRED</prop>
				<prop key="merge*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="execute*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
            </props>
        </property>
    </bean>
    
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list> 
                <value>*Service*</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
		         <value>transactionInterceptor</value>
		         <value>methodCachePointCut</value>
				<value>methodCachePointCutAdvice</value>
            </list>
        </property>
    </bean>  	
 	
 	<bean name="springUtils" class="com.xcj.common.util.SpringUtils"></bean>
	
</beans>